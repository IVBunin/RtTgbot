# –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –±–æ—Ç–∞ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏ 
#!!! –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ from lib import * !!! 

import telebot
import config as cfg
from telebot import types
from telebot.apihelper import ApiTelegramException
from datetime import datetime
from os import listdir
import g4f
#—Å–∞–º–æ–ø–∏—Å–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–Ω–æ—Å—Ç—å—é 
from registration import * 
from readexcel import *


#–º–æ–¥—É–ª–∏ –¥–ª—è –¥–µ–±–∞–≥–∞ 
from time import sleep

#^^^^

#–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –≤–µ—Å—å –≤–≤–æ–¥ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ utf-8 –∏–Ω–∞—á–µ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–µ–∑–Ω–∞–∫–æ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –±—É–¥–µ—Ç –∫—Ä–∞—à
#–ò–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

                                                                                      
bot = telebot.TeleBot(cfg._TOKEN_)


@bot.message_handler(commands=['help', 'start'])
def send_welcome(message): # –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
    try:
        #–ö–Ω–æ–ø–∫–∏ 
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn0 = types.KeyboardButton('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
        markup.add(btn0)
        bot.send_message(message.chat.id,text = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å {0.first_name}, —ç—Ç–æ - —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –ø–æ–º–æ—à–Ω–∏–∫ –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö. –ü–æ–∂–∞–ª–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é".format(message.from_user),reply_markup=markup)
    except ApiTelegramException as e:
        print(e)
 
@bot.message_handler(func=lambda message: True) 
def reg(message): #–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–∫
    try:
        match (message.text):
            case ("—Ç–∞—Ä–∏—Ñ—ã, –∞–∫—Ü–∏–∏ –∏ —É—Å–ª—É–≥–∏"):
                answer = all_options()
                bot.send_message(message.chat.id, ("–í–æ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã:\n") + "\n".join(answer))
            case ("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ –∞–¥—Ä–µ—Å–∞"):
                bot.send_message(message.chat.id, text = "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–£—Å—Å—É—Ä–∏–π—Å–∫ –≥.,–í—ã–≥–æ–Ω–Ω–∞—è,16,121\" ")
                bot.register_next_step_handler(message, reanswer_serch)
            case ("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"):
                bot.send_message(message.chat.id, text = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ñ–∏–æ –ø–æ –æ–±—Ä–∞–∑—Ü—É '–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ' ")
                bot.register_next_step_handler(message, registration_c)
            case("–†–∞—Å—Å—ã–ª–∫–∞"):
                bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç–ø—Ä–∞–≤–∏–≤ \"–û—Ç–º–µ–Ω–∞\"')
                bot.register_next_step_handler(message,send_messages)
            case("–ú–æ–∏ –∑–∞—è–≤–∫–∏"):
                bot.send_message(message.chat.id, "–í–æ—Ç –≤—Å–µ –≤–∞—à–∏ –∑–∞—è–≤–∫–∏:\n"+"".join(ask_answer(get_from_reg(basename, "chat_id", message.chat.id))))
            case("–°–∫—É—á–Ω–æ"):
                bot.send_message(message.chat.id, "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å —É –≤—Å–µ–∑–Ω–∞—é—â–µ–≥–æ –æ—Ä–∞–∫—É–ª–∞?")
                bot.register_next_step_handler(message, chatwgpt)
    except ApiTelegramException as e:
        print(e)

def registration_c(message): #–ë–ª–æ–∫ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    try:
        names = get_keys(basename)
        if message.text in names:
            register_user(basename,message.text,message.chat.id)
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton("—Ç–∞—Ä–∏—Ñ—ã, –∞–∫—Ü–∏–∏ –∏ —É—Å–ª—É–≥–∏")
            btn2= types.KeyboardButton("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ –∞–¥—Ä–µ—Å–∞")
            btn3= types.KeyboardButton("–ú–æ–∏ –∑–∞—è–≤–∫–∏")
            markup.add(btn1,btn2,btn3)
            bot.send_message(message.chat.id, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã",reply_markup=markup)
        else: 
            bot.send_message(message.chat.id, "–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ")
    except ApiTelegramException as e:
        print(e)
        bot.send_message("–ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å")
        return e

def chatwgpt(message): #ChatGPT partly integration
    try:
        response = g4f.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": message.text}],
            provider=g4f.Provider.ChatBase,   
        )
        chat_gpt_response = response
        bot.send_message(message.chat.id, chat_gpt_response)
    except ApiTelegramException as e:
        print(e)
        bot.send_message("–ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å")
        return e

def reanswer_serch(message): #–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ –∞–¥—Ä–µ—Å–∞
    try:
        answer = serch_in_db(message.text)
        if answer == [] or answer == None or answer == 'Void':
            bot.send_message(message.chat.id, "–ü–æ –≤–∞—à–µ–º—É –∞–¥—Ä–µ—Å—É –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–∞—Ä–∏—Ñ—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è")
        else:bot.send_message(message.chat.id, ("–í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã:\n") + " ".join(answer))
    except ApiTelegramException as e:
        print(e)
        bot.send_message("–ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å")
        return e


def send_messages(message): #–†–∞—Å—Å—ã–ª–∫–∞
    try:
        if message.text != '–û—Ç–º–µ–Ω–∞':
            base = open(cfg._LOCAL_BASE_PATH_ + basename, "r")
            data = json.load(base)
            for key,value in data["items"].items():
                if value != str(): 
                    bot.forward_message(value, message.chat.id, message.message_id)
            bot.send_message(message.chat.id, "–û—Ç—Ä–∞–±–æ—Ç–∞–ª")
        else: bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ üëç")
    except ApiTelegramException as e:
        print(e)
        bot.send_message("–ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å")
        return e


if __name__ == "__main__": # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã
    if not listdir(cfg._LOCAL_BASE_PATH_):
        basename = str(datetime.today())
        char = [':','.','+',' ']
        for i in range(len(char)):
           basename= basename.replace(char[i],'_')
        reg_init(basename)
        
        for file_name in listdir(cfg._LOCAL_BASE_PATH_):
                basename = str(file_name)
                basename = basename 
        reg_list =  find_all_people()
        for i in range(len(reg_list)):
            register_user(basename, reg_list[i] , "")
    for file_name in listdir(cfg._LOCAL_BASE_PATH_):
            basename = str(file_name)

    bot.polling(non_stop=True)

    
